version: '3.8'

services:
  # Backend (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    volumes:
      - ./backend:/app
    working_dir: /app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://db_user:db_password@db:5432/db_name
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Frontend (React / Node.js)
  frontend:
    image: node:14
    container_name: frontend
    restart: always
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm start
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - backend_network

  # Baza danych (PostgreSQL)
  db:
    image: postgres:13
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: db_password
      POSTGRES_DB: db_name
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "db_user", "-d", "db_name"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Usługa analityczna (Elasticsearch)
  analytics:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: analytics
    restart: always
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network

  # Usługa bezpieczeństwa (Keycloak)
  security:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: always
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin_password
      - KEYCLOAK_IMPORT=/opt/keycloak/realm-config/your-realm.json
    volumes:
      - ./keycloak-config:/opt/keycloak/realm-config
    command: ["start-dev"]
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  db_data:

